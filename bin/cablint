#!/usr/bin/ruby -Eutf-8:utf-8
# encoding: UTF-8
# Copyright 2015-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"). You may not
# use this file except in compliance with the License. A copy of the License
# is located at
#
#   http://aws.amazon.com/apache2.0/
#
# or in the "license" file accompanying this file. This file is distributed on
# an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.
require 'certlint'
require 'pg'

# Read start parameter (id column in postgres) and step parameter (how many postgres rows per exectution)
start = Integer(ARGV[0])
step = Integer(ARGV[1])
next_step = start + step

# Postgres connection and stream rows
conn = PG.connect(:host => 'localhost', :port => 7777, :dbname => 'ct2', :user => 'postgres', :password => 'postgres')
conn.send_query("SELECT id, cert_hash, cert FROM cablint_all where id > #{start} and id <= #{next_step}")
conn.set_single_row_mode
records = conn.get_result

# Run cablint on each row
records.stream_each do |row|
    raw = row['cert']
    cert_hash = row['cert_hash']
    id = row['id']
    m  = []
    der = PG::Connection.unescape_bytea(raw)
    begin
        m += CertLint::CABLint.lint(der)
    rescue => ex
    end

# Print cert_hash and errors
m.each do |msg|
    begin
        puts cert_hash + "#{msg}"
    rescue Encoding::UndefinedConversionError
        print msg
        puts "\t#{fn}"
    end
end 

    

end
records.clear()
